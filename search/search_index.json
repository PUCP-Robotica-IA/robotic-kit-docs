{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Firmware educativo para Kits Rob\u00f3ticos \u2013 PUCP Este repositorio contiene el firmware base desarrollado en MicroPython para kits rob\u00f3ticos educativos utilizados en la carrera de Ingenier\u00eda Mecatr\u00f3nica en la Pontificia Universidad cat\u00f3lica del Per\u00fa . El proyecto est\u00e1 dise\u00f1ado para facilitar el aprendizaje pr\u00e1ctico de temas fundamentales en rob\u00f3tica m\u00f3vil y rob\u00f3tica de manipuladores. Objetivos del proyecto Desarrollar una plataforma de firmware modular y educativa que permita a los estudiantes: Objetivos Comprender y experimentar con cinem\u00e1tica de robots m\u00f3viles (diferencial, ackermann, mecanum). Programar y controlar brazos rob\u00f3ticos. Implementar algoritmos como \"Go to Goal\", planificaci\u00f3n de trayectorias y filtros de Kalman. Utilizar sensores reales (IMU, encoders, sensores ultras\u00f3nicos). Familiarizarse con conceptos de navegaci\u00f3n, control y percepci\u00f3n. Plataformas soportadas Robot con ruedas mecanum Brazos rob\u00f3ticos (Futuro) Vehiculo diferencial, ackerman, Robots con patas, LIDAR, otros sensores Estructura del repositorio Software_Pico/ \u2502 \u251c\u2500\u2500 firmware/ \u2190 C\u00f3digo fuente principal del firmware \u2502 \u251c\u2500\u2500 config/ \u2190 Archivos de configuraci\u00f3n (hardware, estudiantes) \u2502 \u251c\u2500\u2500 robot/ \u2190 Implementaciones de los distintos robots \u2502 \u251c\u2500\u2500 sensors/ \u2190 Interfaces para sensores (IMU, encoder, ultras\u00f3nicos) \u2502 \u251c\u2500\u2500 utils/ \u2190 Utilidades compartidas (PID, secuencias, jacobianos) \u2502 \u2514\u2500\u2500 libraries/ \u2190 Librer\u00edas externas o wrappers (MQTT, IMU) \u2502 \u251c\u2500\u2500 student_examples/ \u2190 Ejemplos de c\u00f3digo para uso en laboratorios \u251c\u2500\u2500 labs/ \u2190 Pr\u00e1cticas guiadas por tema o curso \u251c\u2500\u2500 tests/ \u2190 Scripts internos para pruebas de hardware/software \u2502 \u2514\u2500\u2500 helpers/ \u2190 Utilidades para pruebas \u251c\u2500\u2500 docs/ \u2190 Documentaci\u00f3n t\u00e9cnica y gu\u00edas de uso \u2502 \u2514\u2500\u2500 hardware \u2190 Diagramas de conexiones y specificaciones \u2502 \u2514\u2500\u2500 modules \u2190 Documentacion de modulos para uso de estudiantes \u2514\u2500\u2500 dev_tools/ \u2190 Scripts para compilaci\u00f3n, flasheo, etc. Gu\u00eda de Inicio para Estudiantes Sigue estos pasos en orden para configurar tu robot desde cero y dejarlo listo para los laboratorios. Parte 1: Preparaci\u00f3n del Entorno En esta parte, instalar\u00e1s todo el software necesario en tu computadora y en la placa Pico W. Paso 1: Instalar el Firmware en la Pico W Sigue las instrucciones de la Gu\u00eda 1: Instalaci\u00f3n del Firmware para preparar tu placa. Paso 2: Ejecutar tu Primer Programa Aprende a usar Thonny con la Gu\u00eda 2: Tu primer programa con Thonny . Paso 3: Cargar los Archivos del Robot Transfiere las librer\u00edas a tu placa siguiendo la Gu\u00eda 3: Carga de archivos base . Parte 2: Configuraci\u00f3n y Verificaci\u00f3n del Robot Una vez finalizada la configuraci\u00f3n del entorno, el siguiente paso es la calibraci\u00f3n de los motores para asegurar su correcto funcionamiento. Paso 4: Verificaci\u00f3n y Ajuste de la Direcci\u00f3n de los Motores Se debe seguir un proceso iterativo de prueba y ajuste para cada motor del robot. Abrir el script de diagn\u00f3stico: Mediante Thonny, abra el archivo 1_test_wheel_direction.py , ubicado en el directorio student_examples/ de su proyecto local. Seleccionar el motor a probar: En el c\u00f3digo fuente del script, modifique el valor del par\u00e1metro motor_id en la llamada a la funci\u00f3n test_wheel_direction() . Asigne el \u00edndice del motor que desea verificar (p. ej., motor_id=0 para el primer motor). # En el archivo 1_test_wheel_direction.py ROBOT_TYPE = 'test' # Inicializa la instancia del robot con los par\u00e1metros correspondientes robot = get_robot ( ROBOT_TYPE , CONFIG [ ROBOT_TYPE ]) # Ejecuta la prueba en el motor con \u00edndice 1 # Realizar la prueba con cada motor y modificar la configuraci\u00f3n # en config.py seg\u00fan corresponda test_wheel_direction ( robot , motor_id = 1 ) Ejecutar la prueba: Ejecute el script en Thonny (\u25b6). Observe el comportamiento f\u00edsico de la rueda seleccionada y la informaci\u00f3n de diagn\u00f3stico que se imprime en la consola. Aplicar correcciones (si es necesario): Si el comportamiento observado no es el esperado, abra el archivo de configuraci\u00f3n /config/student_config.py ubicado en la memoria de la Raspberry Pi Pico. Advertencia Importante No modifiques config.mpy \u2014 este archivo est\u00e1 protegido y contiene la configuraci\u00f3n base. Modifica \u00fanicamente student_config.py . Aplique los siguientes ajustes seg\u00fan el caso: * Rotaci\u00f3n del motor invertida: Si el motor gira en la direcci\u00f3n opuesta a la esperada, a\u00f1ada el par\u00e1metro \"inverted\": True al diccionario del motor correspondiente. * Lectura del encoder invertida: Si la consola indica que la lectura del encoder es incorrecta, a\u00f1ada el par\u00e1metro \"encoder_inverted\": True . * Operaci\u00f3n correcta: Si el motor funciona correctamente, el diccionario correspondiente debe permanecer vac\u00edo ( {} ). # Ejemplo de aplicaci\u00f3n de correcciones en /config/student_config.py MOTOR_DIRECTION = [ { \"inverted\" : True }, # Motor 0: requer\u00eda inversi\u00f3n de giro. {}, # Motor 1: operaba correctamente. { \"encoder_inverted\" : True }, # Motor 2: requer\u00eda inversi\u00f3n de la lectura del encoder. # ... y as\u00ed sucesivamente. ] Guardar y repetir el proceso: Guarde los cambios en el archivo student_config.py y repita los pasos 2 a 4 para cada uno de los motores del robot. Documentaci\u00f3n Detallada Para una explicaci\u00f3n exhaustiva de los par\u00e1metros de configuraci\u00f3n, incluyendo diagramas y ejemplos visuales de cada caso de prueba, consulte la siguiente gu\u00eda: \u27a1\ufe0f Gu\u00eda de Configuraci\u00f3n y Calibraci\u00f3n de Motores Laboratorios incluidos Carpeta Tema labs/pid_speed Control PID de velocidad labs/go_to_goal Movimiento hacia un objetivo (Go-to-Goal) labs/trajectory Planificaci\u00f3n de trayectorias labs/kalman Estimaci\u00f3n de estado con Filtro de Kalman labs/manipulators Cinem\u00e1tica de manipuladores Versionado Cada semestre acad\u00e9mico se etiqueta una versi\u00f3n estable del repositorio. Ejemplos de etiquetas ( tags ) Las versiones estables siguen el formato v<a\u00f1o>-<semestre>-labkit . v2025-1-labkit \u2192 Semestre 2025-1 v2024-2-labkit \u2192 Semestre 2024-2 Para ver y utilizar una versi\u00f3n anterior, puedes usar los siguientes comandos: git tag git checkout v2024-2-labkit Listar versiones: El comando git tag te mostrar\u00e1 todas las etiquetas disponibles en el historial del proyecto. Cambiar de versi\u00f3n: Una vez que identifiques la etiqueta que necesitas, git checkout te permite \"viajar en el tiempo\" a ese punto exacto del c\u00f3digo. Organizaci\u00f3n del Desarrollo Las contribuciones del equipo se organizan a trav\u00e9s de las siguientes ramas principales: Flujo de Ramas en Git main \u2014 Versi\u00f3n estable. dev \u2014 Desarrollo activo. feature/<nombre> \u2014 Funcionalidades nuevas en desarrollo. course/<curso> \u2014 Adaptaciones espec\u00edficas para cursos o pr\u00e1cticas Licencia Este proyecto es de uso acad\u00e9mico exclusivo para cursos dictados en la PUCP. Para solicitudes de uso externo, contactar con el equipo docente o coordinador del proyecto. Contacto Para dudas, soporte o sugerencias: Coordinador t\u00e9cnico: [dequiroz@pucp.edu.pe] Repositorio oficial: https://github.com/PUCP-Robotica-IA/Software_Pico","title":"Introducci\u00f3n"},{"location":"#firmware-educativo-para-kits-roboticos-pucp","text":"Este repositorio contiene el firmware base desarrollado en MicroPython para kits rob\u00f3ticos educativos utilizados en la carrera de Ingenier\u00eda Mecatr\u00f3nica en la Pontificia Universidad cat\u00f3lica del Per\u00fa . El proyecto est\u00e1 dise\u00f1ado para facilitar el aprendizaje pr\u00e1ctico de temas fundamentales en rob\u00f3tica m\u00f3vil y rob\u00f3tica de manipuladores.","title":"Firmware educativo para Kits Rob\u00f3ticos \u2013 PUCP"},{"location":"#objetivos-del-proyecto","text":"Desarrollar una plataforma de firmware modular y educativa que permita a los estudiantes: Objetivos Comprender y experimentar con cinem\u00e1tica de robots m\u00f3viles (diferencial, ackermann, mecanum). Programar y controlar brazos rob\u00f3ticos. Implementar algoritmos como \"Go to Goal\", planificaci\u00f3n de trayectorias y filtros de Kalman. Utilizar sensores reales (IMU, encoders, sensores ultras\u00f3nicos). Familiarizarse con conceptos de navegaci\u00f3n, control y percepci\u00f3n.","title":"Objetivos del proyecto"},{"location":"#plataformas-soportadas","text":"Robot con ruedas mecanum Brazos rob\u00f3ticos (Futuro) Vehiculo diferencial, ackerman, Robots con patas, LIDAR, otros sensores","title":"Plataformas soportadas"},{"location":"#estructura-del-repositorio","text":"Software_Pico/ \u2502 \u251c\u2500\u2500 firmware/ \u2190 C\u00f3digo fuente principal del firmware \u2502 \u251c\u2500\u2500 config/ \u2190 Archivos de configuraci\u00f3n (hardware, estudiantes) \u2502 \u251c\u2500\u2500 robot/ \u2190 Implementaciones de los distintos robots \u2502 \u251c\u2500\u2500 sensors/ \u2190 Interfaces para sensores (IMU, encoder, ultras\u00f3nicos) \u2502 \u251c\u2500\u2500 utils/ \u2190 Utilidades compartidas (PID, secuencias, jacobianos) \u2502 \u2514\u2500\u2500 libraries/ \u2190 Librer\u00edas externas o wrappers (MQTT, IMU) \u2502 \u251c\u2500\u2500 student_examples/ \u2190 Ejemplos de c\u00f3digo para uso en laboratorios \u251c\u2500\u2500 labs/ \u2190 Pr\u00e1cticas guiadas por tema o curso \u251c\u2500\u2500 tests/ \u2190 Scripts internos para pruebas de hardware/software \u2502 \u2514\u2500\u2500 helpers/ \u2190 Utilidades para pruebas \u251c\u2500\u2500 docs/ \u2190 Documentaci\u00f3n t\u00e9cnica y gu\u00edas de uso \u2502 \u2514\u2500\u2500 hardware \u2190 Diagramas de conexiones y specificaciones \u2502 \u2514\u2500\u2500 modules \u2190 Documentacion de modulos para uso de estudiantes \u2514\u2500\u2500 dev_tools/ \u2190 Scripts para compilaci\u00f3n, flasheo, etc.","title":"Estructura del repositorio"},{"location":"#guia-de-inicio-para-estudiantes","text":"Sigue estos pasos en orden para configurar tu robot desde cero y dejarlo listo para los laboratorios.","title":"Gu\u00eda de Inicio para Estudiantes"},{"location":"#parte-1-preparacion-del-entorno","text":"En esta parte, instalar\u00e1s todo el software necesario en tu computadora y en la placa Pico W. Paso 1: Instalar el Firmware en la Pico W Sigue las instrucciones de la Gu\u00eda 1: Instalaci\u00f3n del Firmware para preparar tu placa. Paso 2: Ejecutar tu Primer Programa Aprende a usar Thonny con la Gu\u00eda 2: Tu primer programa con Thonny . Paso 3: Cargar los Archivos del Robot Transfiere las librer\u00edas a tu placa siguiendo la Gu\u00eda 3: Carga de archivos base .","title":"Parte 1: Preparaci\u00f3n del Entorno"},{"location":"#parte-2-configuracion-y-verificacion-del-robot","text":"Una vez finalizada la configuraci\u00f3n del entorno, el siguiente paso es la calibraci\u00f3n de los motores para asegurar su correcto funcionamiento. Paso 4: Verificaci\u00f3n y Ajuste de la Direcci\u00f3n de los Motores Se debe seguir un proceso iterativo de prueba y ajuste para cada motor del robot. Abrir el script de diagn\u00f3stico: Mediante Thonny, abra el archivo 1_test_wheel_direction.py , ubicado en el directorio student_examples/ de su proyecto local. Seleccionar el motor a probar: En el c\u00f3digo fuente del script, modifique el valor del par\u00e1metro motor_id en la llamada a la funci\u00f3n test_wheel_direction() . Asigne el \u00edndice del motor que desea verificar (p. ej., motor_id=0 para el primer motor). # En el archivo 1_test_wheel_direction.py ROBOT_TYPE = 'test' # Inicializa la instancia del robot con los par\u00e1metros correspondientes robot = get_robot ( ROBOT_TYPE , CONFIG [ ROBOT_TYPE ]) # Ejecuta la prueba en el motor con \u00edndice 1 # Realizar la prueba con cada motor y modificar la configuraci\u00f3n # en config.py seg\u00fan corresponda test_wheel_direction ( robot , motor_id = 1 ) Ejecutar la prueba: Ejecute el script en Thonny (\u25b6). Observe el comportamiento f\u00edsico de la rueda seleccionada y la informaci\u00f3n de diagn\u00f3stico que se imprime en la consola. Aplicar correcciones (si es necesario): Si el comportamiento observado no es el esperado, abra el archivo de configuraci\u00f3n /config/student_config.py ubicado en la memoria de la Raspberry Pi Pico. Advertencia Importante No modifiques config.mpy \u2014 este archivo est\u00e1 protegido y contiene la configuraci\u00f3n base. Modifica \u00fanicamente student_config.py . Aplique los siguientes ajustes seg\u00fan el caso: * Rotaci\u00f3n del motor invertida: Si el motor gira en la direcci\u00f3n opuesta a la esperada, a\u00f1ada el par\u00e1metro \"inverted\": True al diccionario del motor correspondiente. * Lectura del encoder invertida: Si la consola indica que la lectura del encoder es incorrecta, a\u00f1ada el par\u00e1metro \"encoder_inverted\": True . * Operaci\u00f3n correcta: Si el motor funciona correctamente, el diccionario correspondiente debe permanecer vac\u00edo ( {} ). # Ejemplo de aplicaci\u00f3n de correcciones en /config/student_config.py MOTOR_DIRECTION = [ { \"inverted\" : True }, # Motor 0: requer\u00eda inversi\u00f3n de giro. {}, # Motor 1: operaba correctamente. { \"encoder_inverted\" : True }, # Motor 2: requer\u00eda inversi\u00f3n de la lectura del encoder. # ... y as\u00ed sucesivamente. ] Guardar y repetir el proceso: Guarde los cambios en el archivo student_config.py y repita los pasos 2 a 4 para cada uno de los motores del robot. Documentaci\u00f3n Detallada Para una explicaci\u00f3n exhaustiva de los par\u00e1metros de configuraci\u00f3n, incluyendo diagramas y ejemplos visuales de cada caso de prueba, consulte la siguiente gu\u00eda: \u27a1\ufe0f Gu\u00eda de Configuraci\u00f3n y Calibraci\u00f3n de Motores","title":"Parte 2: Configuraci\u00f3n y Verificaci\u00f3n del Robot"},{"location":"#laboratorios-incluidos","text":"Carpeta Tema labs/pid_speed Control PID de velocidad labs/go_to_goal Movimiento hacia un objetivo (Go-to-Goal) labs/trajectory Planificaci\u00f3n de trayectorias labs/kalman Estimaci\u00f3n de estado con Filtro de Kalman labs/manipulators Cinem\u00e1tica de manipuladores","title":"Laboratorios incluidos"},{"location":"#versionado","text":"Cada semestre acad\u00e9mico se etiqueta una versi\u00f3n estable del repositorio. Ejemplos de etiquetas ( tags ) Las versiones estables siguen el formato v<a\u00f1o>-<semestre>-labkit . v2025-1-labkit \u2192 Semestre 2025-1 v2024-2-labkit \u2192 Semestre 2024-2 Para ver y utilizar una versi\u00f3n anterior, puedes usar los siguientes comandos: git tag git checkout v2024-2-labkit Listar versiones: El comando git tag te mostrar\u00e1 todas las etiquetas disponibles en el historial del proyecto. Cambiar de versi\u00f3n: Una vez que identifiques la etiqueta que necesitas, git checkout te permite \"viajar en el tiempo\" a ese punto exacto del c\u00f3digo.","title":"Versionado"},{"location":"#organizacion-del-desarrollo","text":"Las contribuciones del equipo se organizan a trav\u00e9s de las siguientes ramas principales: Flujo de Ramas en Git main \u2014 Versi\u00f3n estable. dev \u2014 Desarrollo activo. feature/<nombre> \u2014 Funcionalidades nuevas en desarrollo. course/<curso> \u2014 Adaptaciones espec\u00edficas para cursos o pr\u00e1cticas","title":"Organizaci\u00f3n del Desarrollo"},{"location":"#licencia","text":"Este proyecto es de uso acad\u00e9mico exclusivo para cursos dictados en la PUCP. Para solicitudes de uso externo, contactar con el equipo docente o coordinador del proyecto.","title":"Licencia"},{"location":"#contacto","text":"Para dudas, soporte o sugerencias: Coordinador t\u00e9cnico: [dequiroz@pucp.edu.pe] Repositorio oficial: https://github.com/PUCP-Robotica-IA/Software_Pico","title":"Contacto"},{"location":"configure/configure/","text":"CONFIGURACIONES INICIALES config.py \ud83d\udce6 CONFIG: Diccionario de configuraci\u00f3n de hardware Este bloque de c\u00f3digo es un diccionario en Python que contiene la configuraci\u00f3n de hardware para distintos tipos de robots o dispositivos. Cada clave representa una configuraci\u00f3n espec\u00edfica que puede activarse seg\u00fan el tipo de robot que se est\u00e9 utilizando. CONFIG [\"test\"] : Configura al robot omnidireccional en modo prueba para usar dos de sus ruedas mediante mediante se\u00f1ales PWM, encoders(a,b) y direcci\u00f3n. PWM, direcci\u00f3n y encoders. CONFIG [\"mecanum\"] : Configura al robot omnidireccional para usar sus cuatro ruedas y sensores asociador. PWM, direcci\u00f3n y encoders. Sensores ultras\u00f3nicos (3) conectados a pines anal\u00f3gicos (ADC). Sensor IMU conectado por I2C. CONFIG [\"arm\"] : Configura al brazo robotico de cuatro grados de libertad. 4 servomotores. Salida para efector final. Sensor ultrasonido. CONFIG [\"sensors\"] : Configura al brazo robotico de cuatro grados de libertad. Sensores ultras\u00f3nicos (3) conectados a pines anal\u00f3gicos (ADC). Sensor IMU conectado por I2C. merge_motor_directions(config) Esta funci\u00f3n toma un subdiccionario del diccionario CONFIG que contiene una lista de par\u00e1metros de configuraci\u00f3n para motores bajo la clave \"motors\", y fusiona cada uno de ellos con posibles valores adicionales definidos externamente (por ejemplo, direcciones personalizadas). Par\u00e1metros: config: 'dict' Diccionario de configuraci\u00f3n de hardware correspondiente al robot omnidireccional.","title":"Configuraci\u00f3n de pines"},{"location":"configure/configure/#configuraciones-iniciales","text":"","title":"CONFIGURACIONES INICIALES"},{"location":"configure/configure/#configpy","text":"\ud83d\udce6 CONFIG: Diccionario de configuraci\u00f3n de hardware Este bloque de c\u00f3digo es un diccionario en Python que contiene la configuraci\u00f3n de hardware para distintos tipos de robots o dispositivos. Cada clave representa una configuraci\u00f3n espec\u00edfica que puede activarse seg\u00fan el tipo de robot que se est\u00e9 utilizando. CONFIG [\"test\"] : Configura al robot omnidireccional en modo prueba para usar dos de sus ruedas mediante mediante se\u00f1ales PWM, encoders(a,b) y direcci\u00f3n. PWM, direcci\u00f3n y encoders. CONFIG [\"mecanum\"] : Configura al robot omnidireccional para usar sus cuatro ruedas y sensores asociador. PWM, direcci\u00f3n y encoders. Sensores ultras\u00f3nicos (3) conectados a pines anal\u00f3gicos (ADC). Sensor IMU conectado por I2C. CONFIG [\"arm\"] : Configura al brazo robotico de cuatro grados de libertad. 4 servomotores. Salida para efector final. Sensor ultrasonido. CONFIG [\"sensors\"] : Configura al brazo robotico de cuatro grados de libertad. Sensores ultras\u00f3nicos (3) conectados a pines anal\u00f3gicos (ADC). Sensor IMU conectado por I2C. merge_motor_directions(config) Esta funci\u00f3n toma un subdiccionario del diccionario CONFIG que contiene una lista de par\u00e1metros de configuraci\u00f3n para motores bajo la clave \"motors\", y fusiona cada uno de ellos con posibles valores adicionales definidos externamente (por ejemplo, direcciones personalizadas). Par\u00e1metros: config: 'dict' Diccionario de configuraci\u00f3n de hardware correspondiente al robot omnidireccional.","title":"config.py"},{"location":"configure/motor_config_guide/","text":"Configuraci\u00f3n y Calibraci\u00f3n de Motores Ya tienes los archivos base en tu Pico W. El siguiente paso, y uno de los m\u00e1s importantes, es asegurar que cada motor de tu robot gire en la direcci\u00f3n correcta. Esta gu\u00eda te ense\u00f1ar\u00e1 a diagnosticar y corregir el comportamiento de cada motor de forma individual. Requisitos Haber completado la Gu\u00eda 3: Carga de archivos base . Tu placa Raspberry Pi Pico W conectada a la computadora y con los archivos del proyecto ya cargados. El editor Thonny abierto y conectado a la Pico. Paso 1: Entender los Archivos de Configuraci\u00f3n El firmware separa la configuraci\u00f3n en dos archivos para proteger el hardware y darte flexibilidad. config.py : Es la configuraci\u00f3n base del hardware (pines, etc.). Este archivo NO debes modificarlo. student_config.py : Este es tu archivo de configuraci\u00f3n personal . Aqu\u00ed realizar\u00e1s todos los ajustes. Dentro de student_config.py puedes usar dos par\u00e1metros para cada motor: - \"inverted\": True : Invierte la direcci\u00f3n de giro f\u00edsico del motor. - \"encoder_inverted\": True : Invierte la lectura del sensor de giro (encoder) , sin afectar el movimiento f\u00edsico. Advertencia Importante La modificaci\u00f3n incorrecta de archivos puede causar un comportamiento inesperado. Realiza todos los cambios exclusivamente en student_config.py . Paso 2: Preparar el Script de Diagn\u00f3stico Usaremos un script preparado para probar cada motor de forma aislada. En Thonny, aseg\u00farate de tener visible el panel de archivos ( Ver > Archivos ). En el panel de \"Este equipo\" (tu computadora), navega hasta el directorio del proyecto y abre la carpeta student_examples . Localiza y haz doble clic en el archivo 1_test_wheel_direction.py para abrirlo en el editor. Imagen: Localizando el script de prueba en el explorador de archivos de Thonny. Dentro del script, busca la l\u00ednea final que llama a la funci\u00f3n test_wheel_direction() . Para empezar, aseg\u00farate de que est\u00e9 probando el primer motor, cambiando el par\u00e1metro a motor_id=0 . # Al final del archivo 1_test_wheel_direction.py test_wheel_direction ( robot , motor_id = 0 ) Paso 3: Ejecutar la Prueba y Aplicar Correcciones Este es el ciclo principal: ejecutar la prueba, observar el resultado y corregir si es necesario. Ejecuta el script presionando el bot\u00f3n de Play (\u25b6) en Thonny. Observa atentamente el comportamiento de la rueda del motor 0 y la informaci\u00f3n que aparece en la consola de Thonny. Compara lo que ves con los siguientes casos y aplica la correcci\u00f3n correspondiente. Caso A: Funcionamiento Correcto \u2705 Observaci\u00f3n: La rueda gira hacia adelante, luego hacia atr\u00e1s. La consola muestra una lectura positiva del encoder al avanzar. Acci\u00f3n: \u00a1Perfecto! No necesitas hacer nada. Pasa a probar el siguiente motor ( motor_id=1 ). Imagen: Comportamiento esperado del motor. Caso B: Motor con Giro Invertido \ud83d\udd04 Observaci\u00f3n: La rueda gira en la direcci\u00f3n opuesta a la esperada (hacia atr\u00e1s cuando deber\u00eda ir hacia adelante). Acci\u00f3n: En el panel de archivos de la Raspberry Pi Pico , abre el archivo /config/student_config.py . A\u00f1ade \"inverted\": True al diccionario del motor que est\u00e1s probando. Guarda el archivo ( Ctrl+S ) y vuelve a ejecutar la prueba para confirmar que el problema est\u00e1 resuelto. # En student_config.py MOTOR_DIRECTION = [ { \"inverted\" : True }, # Correcci\u00f3n para el Motor 0 #... ] Imagen: El motor gira en sentido contrario. Caso C: Lectura del Encoder Invertida \ud83d\udcc8\ud83d\udcc9 Observaci\u00f3n: El movimiento f\u00edsico de la rueda es correcto, pero la consola muestra una lectura con signo contrario (p. ej., negativa al avanzar). Acci\u00f3n: Abre /config/student_config.py en tu Pico . A\u00f1ade \"encoder_inverted\": True al diccionario del motor correspondiente. Guarda y vuelve a ejecutar la prueba para verificar que la lectura ahora es correcta. # En student_config.py MOTOR_DIRECTION = [ { \"encoder_inverted\" : True }, # Correcci\u00f3n para el Motor 0 #... ] Paso 4: Verificaci\u00f3n Final Una vez que el primer motor funcione correctamente, repite el Paso 3 para todos los dem\u00e1s motores de tu robot ( motor_id=1 , motor_id=2 , etc.). Al finalizar, tu archivo student_config.py contendr\u00e1 la configuraci\u00f3n personalizada para tu robot. Podr\u00eda verse as\u00ed: # Ejemplo de una configuraci\u00f3n final para un robot de 4 ruedas MOTOR_DIRECTION = [ {}, # Motor 0: Operaba correctamente. { \"inverted\" : True }, # Motor 1: Requer\u00eda inversi\u00f3n de giro. { \"encoder_inverted\" : True }, # Motor 2: Solo el encoder estaba invertido. { \"inverted\" : True }, # Motor 3: Requer\u00eda inversi\u00f3n de giro. ] \u00a1Calibraci\u00f3n Completada! \u00a1Excelente trabajo! Has finalizado la calibraci\u00f3n de los motores. Tu robot ahora responde con precisi\u00f3n y est\u00e1 listo para los laboratorios de movimiento y control.","title":"Configuraci\u00f3n y calibraci\u00f3n de motores"},{"location":"configure/motor_config_guide/#configuracion-y-calibracion-de-motores","text":"Ya tienes los archivos base en tu Pico W. El siguiente paso, y uno de los m\u00e1s importantes, es asegurar que cada motor de tu robot gire en la direcci\u00f3n correcta. Esta gu\u00eda te ense\u00f1ar\u00e1 a diagnosticar y corregir el comportamiento de cada motor de forma individual. Requisitos Haber completado la Gu\u00eda 3: Carga de archivos base . Tu placa Raspberry Pi Pico W conectada a la computadora y con los archivos del proyecto ya cargados. El editor Thonny abierto y conectado a la Pico.","title":"Configuraci\u00f3n y Calibraci\u00f3n de Motores"},{"location":"configure/motor_config_guide/#paso-1-entender-los-archivos-de-configuracion","text":"El firmware separa la configuraci\u00f3n en dos archivos para proteger el hardware y darte flexibilidad. config.py : Es la configuraci\u00f3n base del hardware (pines, etc.). Este archivo NO debes modificarlo. student_config.py : Este es tu archivo de configuraci\u00f3n personal . Aqu\u00ed realizar\u00e1s todos los ajustes. Dentro de student_config.py puedes usar dos par\u00e1metros para cada motor: - \"inverted\": True : Invierte la direcci\u00f3n de giro f\u00edsico del motor. - \"encoder_inverted\": True : Invierte la lectura del sensor de giro (encoder) , sin afectar el movimiento f\u00edsico. Advertencia Importante La modificaci\u00f3n incorrecta de archivos puede causar un comportamiento inesperado. Realiza todos los cambios exclusivamente en student_config.py .","title":"Paso 1: Entender los Archivos de Configuraci\u00f3n"},{"location":"configure/motor_config_guide/#paso-2-preparar-el-script-de-diagnostico","text":"Usaremos un script preparado para probar cada motor de forma aislada. En Thonny, aseg\u00farate de tener visible el panel de archivos ( Ver > Archivos ). En el panel de \"Este equipo\" (tu computadora), navega hasta el directorio del proyecto y abre la carpeta student_examples . Localiza y haz doble clic en el archivo 1_test_wheel_direction.py para abrirlo en el editor. Imagen: Localizando el script de prueba en el explorador de archivos de Thonny. Dentro del script, busca la l\u00ednea final que llama a la funci\u00f3n test_wheel_direction() . Para empezar, aseg\u00farate de que est\u00e9 probando el primer motor, cambiando el par\u00e1metro a motor_id=0 . # Al final del archivo 1_test_wheel_direction.py test_wheel_direction ( robot , motor_id = 0 )","title":"Paso 2: Preparar el Script de Diagn\u00f3stico"},{"location":"configure/motor_config_guide/#paso-3-ejecutar-la-prueba-y-aplicar-correcciones","text":"Este es el ciclo principal: ejecutar la prueba, observar el resultado y corregir si es necesario. Ejecuta el script presionando el bot\u00f3n de Play (\u25b6) en Thonny. Observa atentamente el comportamiento de la rueda del motor 0 y la informaci\u00f3n que aparece en la consola de Thonny. Compara lo que ves con los siguientes casos y aplica la correcci\u00f3n correspondiente.","title":"Paso 3: Ejecutar la Prueba y Aplicar Correcciones"},{"location":"configure/motor_config_guide/#caso-a-funcionamiento-correcto","text":"Observaci\u00f3n: La rueda gira hacia adelante, luego hacia atr\u00e1s. La consola muestra una lectura positiva del encoder al avanzar. Acci\u00f3n: \u00a1Perfecto! No necesitas hacer nada. Pasa a probar el siguiente motor ( motor_id=1 ). Imagen: Comportamiento esperado del motor.","title":"Caso A: Funcionamiento Correcto \u2705"},{"location":"configure/motor_config_guide/#caso-b-motor-con-giro-invertido","text":"Observaci\u00f3n: La rueda gira en la direcci\u00f3n opuesta a la esperada (hacia atr\u00e1s cuando deber\u00eda ir hacia adelante). Acci\u00f3n: En el panel de archivos de la Raspberry Pi Pico , abre el archivo /config/student_config.py . A\u00f1ade \"inverted\": True al diccionario del motor que est\u00e1s probando. Guarda el archivo ( Ctrl+S ) y vuelve a ejecutar la prueba para confirmar que el problema est\u00e1 resuelto. # En student_config.py MOTOR_DIRECTION = [ { \"inverted\" : True }, # Correcci\u00f3n para el Motor 0 #... ] Imagen: El motor gira en sentido contrario.","title":"Caso B: Motor con Giro Invertido \ud83d\udd04"},{"location":"configure/motor_config_guide/#caso-c-lectura-del-encoder-invertida","text":"Observaci\u00f3n: El movimiento f\u00edsico de la rueda es correcto, pero la consola muestra una lectura con signo contrario (p. ej., negativa al avanzar). Acci\u00f3n: Abre /config/student_config.py en tu Pico . A\u00f1ade \"encoder_inverted\": True al diccionario del motor correspondiente. Guarda y vuelve a ejecutar la prueba para verificar que la lectura ahora es correcta. # En student_config.py MOTOR_DIRECTION = [ { \"encoder_inverted\" : True }, # Correcci\u00f3n para el Motor 0 #... ]","title":"Caso C: Lectura del Encoder Invertida \ud83d\udcc8\ud83d\udcc9"},{"location":"configure/motor_config_guide/#paso-4-verificacion-final","text":"Una vez que el primer motor funcione correctamente, repite el Paso 3 para todos los dem\u00e1s motores de tu robot ( motor_id=1 , motor_id=2 , etc.). Al finalizar, tu archivo student_config.py contendr\u00e1 la configuraci\u00f3n personalizada para tu robot. Podr\u00eda verse as\u00ed: # Ejemplo de una configuraci\u00f3n final para un robot de 4 ruedas MOTOR_DIRECTION = [ {}, # Motor 0: Operaba correctamente. { \"inverted\" : True }, # Motor 1: Requer\u00eda inversi\u00f3n de giro. { \"encoder_inverted\" : True }, # Motor 2: Solo el encoder estaba invertido. { \"inverted\" : True }, # Motor 3: Requer\u00eda inversi\u00f3n de giro. ] \u00a1Calibraci\u00f3n Completada! \u00a1Excelente trabajo! Has finalizado la calibraci\u00f3n de los motores. Tu robot ahora responde con precisi\u00f3n y est\u00e1 listo para los laboratorios de movimiento y control.","title":"Paso 4: Verificaci\u00f3n Final"},{"location":"guides/base_guide/","text":"Gu\u00eda 3: Carga de archivos base y librer\u00edas para el robot (Pico W) Ya tenemos Thonny funcionando y la Pico W con el firmware instalado. Ahora cargaremos un conjunto de archivos esenciales que contienen funciones, librer\u00edas y configuraciones necesarias para controlar tu robot. Requisitos Haber completado la Gu\u00eda 2: Tu primer programa con Thonny . Tu placa Raspberry Pi Pico W conectada a la computadora. Un cable de datos micro-USB. Acceso al archivo .zip con los archivos del robot. Paso 1: Descargar los archivos base del robot Hemos preparado un paquete que contiene todos los archivos y carpetas necesarias para que tu robot funcione correctamente. Descarga el archivo .zip desde el siguiente enlace: \ud83d\udce6 Descargar archivos base del robot Una vez descargado, extrae (descomprime) el contenido. Ver\u00e1s una carpeta que contiene subcarpetas como: Imagen: Distribuci\u00f3n de carpetas Paso 2: Abrir Thonny y conectar la placa Abre el editor Thonny . Conecta tu Raspberry Pi Pico W a la computadora ( sin presionar BOOTSEL ). Aseg\u00farate de que en la parte inferior derecha de Thonny est\u00e9 seleccionado: MicroPython (Raspberry Pi Pico) Imagen: Distribuci\u00f3n de carpetas Paso 3: Cargar y Verificar los Archivos en la Pico W En este paso, copiaremos las carpetas del proyecto desde tu computadora a la memoria de la Pico W. En Thonny, ve al men\u00fa Ver > Archivos para mostrar el explorador de archivos si no est\u00e1 visible. En el panel izquierdo ( \"Este equipo\" ), navega hasta la carpeta que descomprimiste en el Paso 1. Selecciona todo el contenido de la carpeta (las subcarpetas config , libraries , robot , sensors , utils , etc.). Para seleccionar varios elementos, mant\u00e9n presionada la tecla Ctrl (o Cmd en Mac) y haz clic en cada uno. Haz clic derecho sobre los elementos seleccionados y elige la opci\u00f3n Subir a / . Thonny comenzar\u00e1 la carga. Una vez finalizada, verifica que en el panel derecho ( \"Raspberry Pi Pico\" ) aparezcan las carpetas que acabas de subir. La estructura debe verse as\u00ed: Imagen: Proceso de subir las carpetas del proyecto a la Pico W. Sube el contenido, no la carpeta contenedora Es crucial que subas las carpetas config , libraries , etc., directamente a la ra\u00edz ( / ) de la Pico. No subas la carpeta principal que las contiene. Paso 4: Ejecutar Prueba de Verificaci\u00f3n (Opcional) Para confirmar que la Pico reconoce correctamente los archivos, puedes ejecutar un peque\u00f1o script. Copia y pega el siguiente c\u00f3digo en el editor principal de Thonny: import os print ( \" \\n ----------Archivos en la Pico:------------ \\n \" ) print ( os . listdir ()) print ( \" \\n ------------------------------------------ \\n \" ) Presiona F5 o el bot\u00f3n de Ejecutar (\u25b6). En la consola (Shell) de Thonny, deber\u00edas ver una lista que incluye los nombres de las carpetas que subiste. Imagen: Validando la carga de archivos mediante un script. \u00a1Carga completada! Ya tienes listo el entorno de archivos en tu Raspberry Pi Pico W. Esto te permitir\u00e1 controlar sensores, motores, y ejecutar programas complejos para tu robot. En las siguientes gu\u00edas empezaremos a usar estas librer\u00edas para mover el robot, leer sensores y m\u00e1s.","title":"Gu\u00eda 3: Carga de archivos base"},{"location":"guides/base_guide/#guia-3-carga-de-archivos-base-y-librerias-para-el-robot-pico-w","text":"Ya tenemos Thonny funcionando y la Pico W con el firmware instalado. Ahora cargaremos un conjunto de archivos esenciales que contienen funciones, librer\u00edas y configuraciones necesarias para controlar tu robot. Requisitos Haber completado la Gu\u00eda 2: Tu primer programa con Thonny . Tu placa Raspberry Pi Pico W conectada a la computadora. Un cable de datos micro-USB. Acceso al archivo .zip con los archivos del robot.","title":"Gu\u00eda 3: Carga de archivos base y librer\u00edas para el robot (Pico W)"},{"location":"guides/base_guide/#paso-1-descargar-los-archivos-base-del-robot","text":"Hemos preparado un paquete que contiene todos los archivos y carpetas necesarias para que tu robot funcione correctamente. Descarga el archivo .zip desde el siguiente enlace: \ud83d\udce6 Descargar archivos base del robot Una vez descargado, extrae (descomprime) el contenido. Ver\u00e1s una carpeta que contiene subcarpetas como: Imagen: Distribuci\u00f3n de carpetas","title":"Paso 1: Descargar los archivos base del robot"},{"location":"guides/base_guide/#paso-2-abrir-thonny-y-conectar-la-placa","text":"Abre el editor Thonny . Conecta tu Raspberry Pi Pico W a la computadora ( sin presionar BOOTSEL ). Aseg\u00farate de que en la parte inferior derecha de Thonny est\u00e9 seleccionado: MicroPython (Raspberry Pi Pico) Imagen: Distribuci\u00f3n de carpetas","title":"Paso 2: Abrir Thonny y conectar la placa"},{"location":"guides/base_guide/#paso-3-cargar-y-verificar-los-archivos-en-la-pico-w","text":"En este paso, copiaremos las carpetas del proyecto desde tu computadora a la memoria de la Pico W. En Thonny, ve al men\u00fa Ver > Archivos para mostrar el explorador de archivos si no est\u00e1 visible. En el panel izquierdo ( \"Este equipo\" ), navega hasta la carpeta que descomprimiste en el Paso 1. Selecciona todo el contenido de la carpeta (las subcarpetas config , libraries , robot , sensors , utils , etc.). Para seleccionar varios elementos, mant\u00e9n presionada la tecla Ctrl (o Cmd en Mac) y haz clic en cada uno. Haz clic derecho sobre los elementos seleccionados y elige la opci\u00f3n Subir a / . Thonny comenzar\u00e1 la carga. Una vez finalizada, verifica que en el panel derecho ( \"Raspberry Pi Pico\" ) aparezcan las carpetas que acabas de subir. La estructura debe verse as\u00ed: Imagen: Proceso de subir las carpetas del proyecto a la Pico W. Sube el contenido, no la carpeta contenedora Es crucial que subas las carpetas config , libraries , etc., directamente a la ra\u00edz ( / ) de la Pico. No subas la carpeta principal que las contiene.","title":"Paso 3: Cargar y Verificar los Archivos en la Pico W"},{"location":"guides/base_guide/#paso-4-ejecutar-prueba-de-verificacion-opcional","text":"Para confirmar que la Pico reconoce correctamente los archivos, puedes ejecutar un peque\u00f1o script. Copia y pega el siguiente c\u00f3digo en el editor principal de Thonny: import os print ( \" \\n ----------Archivos en la Pico:------------ \\n \" ) print ( os . listdir ()) print ( \" \\n ------------------------------------------ \\n \" ) Presiona F5 o el bot\u00f3n de Ejecutar (\u25b6). En la consola (Shell) de Thonny, deber\u00edas ver una lista que incluye los nombres de las carpetas que subiste. Imagen: Validando la carga de archivos mediante un script. \u00a1Carga completada! Ya tienes listo el entorno de archivos en tu Raspberry Pi Pico W. Esto te permitir\u00e1 controlar sensores, motores, y ejecutar programas complejos para tu robot. En las siguientes gu\u00edas empezaremos a usar estas librer\u00edas para mover el robot, leer sensores y m\u00e1s.","title":"Paso 4: Ejecutar Prueba de Verificaci\u00f3n (Opcional)"},{"location":"guides/micropython_guide/","text":"Gu\u00eda 1: Instalaci\u00f3n del firmware de la Raspberry Pi Pico W Sigue estos tres pasos para preparar tu placa Raspberry Pi Pico W para los laboratorio. Requisitos Una placa Raspberry Pi Pico W . Un cable de datos micro-USB. El editor Thonny IDE instalado. Paso 1: Descargar el firmware Primero, obt\u00e9n el archivo de firmware oficial de MicroPython, descargar la \u00faltima versi\u00f3n del firmware. Firmware MicroPython para Pico W (.uf2) Guarda este archivo en tu escritorio o en un lugar f\u00e1cil de encontrar. Paso 2: Instalar el firmware en la placa Ahora, vamos a \"flashear\" el firmware en la memoria del Pico. Mant\u00e9n presionado el bot\u00f3n BOOTSEL de tu Pico. Imagen: Bot\u00f3n BOOTSEL Sin soltarlo , conecta el Pico a tu computadora. Aparecer\u00e1 una unidad llamada RPI-RP2 . Ahora suelta el bot\u00f3n BOOTSEL . Imagen: Unidad RPI-RP2 ! 4. Arrastra y suelta el archivo .uf2 que descargaste sobre esa unidad RPI-RP2 . \u00a1Firmware Instalado! La placa se reiniciar\u00e1 sola y la unidad RPI-RP2 desaparecer\u00e1 de tu explorador de archivos. Esto es normal y significa que la instalaci\u00f3n fue exitosa. \u00a1Listo! Tu placa ya tiene MicroPython instalado. Ahora est\u00e1s listo para continuar con la siguiente gu\u00eda: programarla usando Thonny .","title":"Gu\u00eda 1: Instalaci\u00f3n del firmware del Micropython"},{"location":"guides/micropython_guide/#guia-1-instalacion-del-firmware-de-la-raspberry-pi-pico-w","text":"Sigue estos tres pasos para preparar tu placa Raspberry Pi Pico W para los laboratorio. Requisitos Una placa Raspberry Pi Pico W . Un cable de datos micro-USB. El editor Thonny IDE instalado.","title":"Gu\u00eda 1: Instalaci\u00f3n del firmware de la Raspberry Pi Pico W"},{"location":"guides/micropython_guide/#paso-1-descargar-el-firmware","text":"Primero, obt\u00e9n el archivo de firmware oficial de MicroPython, descargar la \u00faltima versi\u00f3n del firmware. Firmware MicroPython para Pico W (.uf2) Guarda este archivo en tu escritorio o en un lugar f\u00e1cil de encontrar.","title":"Paso 1: Descargar el firmware"},{"location":"guides/micropython_guide/#paso-2-instalar-el-firmware-en-la-placa","text":"Ahora, vamos a \"flashear\" el firmware en la memoria del Pico. Mant\u00e9n presionado el bot\u00f3n BOOTSEL de tu Pico. Imagen: Bot\u00f3n BOOTSEL Sin soltarlo , conecta el Pico a tu computadora. Aparecer\u00e1 una unidad llamada RPI-RP2 . Ahora suelta el bot\u00f3n BOOTSEL . Imagen: Unidad RPI-RP2 ! 4. Arrastra y suelta el archivo .uf2 que descargaste sobre esa unidad RPI-RP2 . \u00a1Firmware Instalado! La placa se reiniciar\u00e1 sola y la unidad RPI-RP2 desaparecer\u00e1 de tu explorador de archivos. Esto es normal y significa que la instalaci\u00f3n fue exitosa.","title":"Paso 2: Instalar el firmware en la placa"},{"location":"guides/micropython_guide/#listo","text":"Tu placa ya tiene MicroPython instalado. Ahora est\u00e1s listo para continuar con la siguiente gu\u00eda: programarla usando Thonny .","title":"\u00a1Listo!"},{"location":"guides/thony_guide/","text":"Gu\u00eda 2: Tu primer programa con Thonny Ahora que tu placa tiene el firmware, vamos a comprobar que todo funciona correctamente. Para ello, instalaremos el editor Thonny y ejecutaremos un c\u00f3digo que haga parpadear el LED de la placa. Requisitos Haber completado la Gu\u00eda 1: Instalaci\u00f3n del Firmware . Tu placa Raspberry Pi Pico W (ya con el firmware). Un cable de datos micro-USB. Paso 1: Instalar el editor Thonny Thonny es el Entorno de Desarrollo Integrado (IDE) que usaremos. Es perfecto para principiantes porque es sencillo e incluye todo lo necesario para programar la Pico. Descarga Thonny desde su p\u00e1gina oficial: https://thonny.org/ Instala el programa en tu computadora siguiendo los pasos del asistente. Paso 2: Conectar la placa a Thonny Abre Thonny . Conecta tu Raspberry Pi Pico W a la computadora (esta vez de forma normal, sin presionar BOOTSEL ). En la esquina inferior derecha de Thonny, haz clic y aseg\u00farate de que est\u00e9 seleccionado el int\u00e9rprete MicroPython (Raspberry Pi Pico) . Si no aparece, desconecta y vuelve a conectar la placa. Imagen: Selecci\u00f3n del int\u00e9rprete MicroPython (Raspberry Pi Pico) en Thonny. Paso 3: C\u00f3digo de prueba (LED intermitente) Vamos a escribir y ejecutar nuestro primer programa para verificar la conexi\u00f3n. Copia el siguiente c\u00f3digo y p\u00e9galo en la ventana principal del editor de Thonny (donde dice <untitled> ). # Importamos las herramientas necesarias from machine import Pin from time import sleep # Configuramos el pin del LED integrado como una salida. # En la Pico W, el LED se llama 'LED'. led = Pin ( 'LED' , Pin . OUT ) # Creamos un bucle infinito para que el programa se repita sin parar while True : led . on () # Encender el LED sleep ( 1 ) # Esperar 1 segundo led . off () # Apagar el LED sleep ( 1 ) # Esperar 1 segundo Haz clic en el bot\u00f3n verde de \"Play\" (\u25b6) o presiona la tecla F5 para ejecutar el c\u00f3digo. Imagen: LED intermitente \u00a1Verificaci\u00f3n Exitosa! Si todo sali\u00f3 bien, el LED verde integrado en tu Pico W comenzar\u00e1 a parpadear (se enciende por un segundo y se apaga por un segundo). \u00a1Felicidades, has ejecutado tu primer programa! Para detenerlo, haz clic en el bot\u00f3n rojo de \"Stop\" (\u25a0) en Thonny. Paso 4 (Opcional pero recomendado): Guardar el c\u00f3digo en la placa Para que tu programa se ejecute autom\u00e1ticamente cada vez que conectes la placa (sin necesidad de una computadora), gu\u00e1rdalo con el nombre main.py . Ve a Archivo > Guardar como... ( File > Save as... ). Elige guardar en Raspberry Pi Pico . Nombra el archivo exactamente como main.py y haz clic en OK . Imagen: Guardar c\u00f3digo main.py en la raspberry pi pico W El poder de main.py Cualquier c\u00f3digo guardado como main.py en la memoria de la Pico se ejecutar\u00e1 autom\u00e1ticamente al encenderla. \u00a1Listo! Has completado la configuraci\u00f3n inicial y verificado que puedes comunicarte con tu Pico W. Ahora est\u00e1s listo para continuar con la siguiente gu\u00eda: Gu\u00eda 3: Cargar los archivos base del robot .","title":"Gu\u00eda 2: Tu primer programa con Thonny"},{"location":"guides/thony_guide/#guia-2-tu-primer-programa-con-thonny","text":"Ahora que tu placa tiene el firmware, vamos a comprobar que todo funciona correctamente. Para ello, instalaremos el editor Thonny y ejecutaremos un c\u00f3digo que haga parpadear el LED de la placa. Requisitos Haber completado la Gu\u00eda 1: Instalaci\u00f3n del Firmware . Tu placa Raspberry Pi Pico W (ya con el firmware). Un cable de datos micro-USB.","title":"Gu\u00eda 2: Tu primer programa con Thonny"},{"location":"guides/thony_guide/#paso-1-instalar-el-editor-thonny","text":"Thonny es el Entorno de Desarrollo Integrado (IDE) que usaremos. Es perfecto para principiantes porque es sencillo e incluye todo lo necesario para programar la Pico. Descarga Thonny desde su p\u00e1gina oficial: https://thonny.org/ Instala el programa en tu computadora siguiendo los pasos del asistente.","title":"Paso 1: Instalar el editor Thonny"},{"location":"guides/thony_guide/#paso-2-conectar-la-placa-a-thonny","text":"Abre Thonny . Conecta tu Raspberry Pi Pico W a la computadora (esta vez de forma normal, sin presionar BOOTSEL ). En la esquina inferior derecha de Thonny, haz clic y aseg\u00farate de que est\u00e9 seleccionado el int\u00e9rprete MicroPython (Raspberry Pi Pico) . Si no aparece, desconecta y vuelve a conectar la placa. Imagen: Selecci\u00f3n del int\u00e9rprete MicroPython (Raspberry Pi Pico) en Thonny.","title":"Paso 2: Conectar la placa a Thonny"},{"location":"guides/thony_guide/#paso-3-codigo-de-prueba-led-intermitente","text":"Vamos a escribir y ejecutar nuestro primer programa para verificar la conexi\u00f3n. Copia el siguiente c\u00f3digo y p\u00e9galo en la ventana principal del editor de Thonny (donde dice <untitled> ). # Importamos las herramientas necesarias from machine import Pin from time import sleep # Configuramos el pin del LED integrado como una salida. # En la Pico W, el LED se llama 'LED'. led = Pin ( 'LED' , Pin . OUT ) # Creamos un bucle infinito para que el programa se repita sin parar while True : led . on () # Encender el LED sleep ( 1 ) # Esperar 1 segundo led . off () # Apagar el LED sleep ( 1 ) # Esperar 1 segundo Haz clic en el bot\u00f3n verde de \"Play\" (\u25b6) o presiona la tecla F5 para ejecutar el c\u00f3digo. Imagen: LED intermitente \u00a1Verificaci\u00f3n Exitosa! Si todo sali\u00f3 bien, el LED verde integrado en tu Pico W comenzar\u00e1 a parpadear (se enciende por un segundo y se apaga por un segundo). \u00a1Felicidades, has ejecutado tu primer programa! Para detenerlo, haz clic en el bot\u00f3n rojo de \"Stop\" (\u25a0) en Thonny.","title":"Paso 3: C\u00f3digo de prueba (LED intermitente)"},{"location":"guides/thony_guide/#paso-4-opcional-pero-recomendado-guardar-el-codigo-en-la-placa","text":"Para que tu programa se ejecute autom\u00e1ticamente cada vez que conectes la placa (sin necesidad de una computadora), gu\u00e1rdalo con el nombre main.py . Ve a Archivo > Guardar como... ( File > Save as... ). Elige guardar en Raspberry Pi Pico . Nombra el archivo exactamente como main.py y haz clic en OK . Imagen: Guardar c\u00f3digo main.py en la raspberry pi pico W El poder de main.py Cualquier c\u00f3digo guardado como main.py en la memoria de la Pico se ejecutar\u00e1 autom\u00e1ticamente al encenderla.","title":"Paso 4 (Opcional pero recomendado): Guardar el c\u00f3digo en la placa"},{"location":"guides/thony_guide/#listo","text":"Has completado la configuraci\u00f3n inicial y verificado que puedes comunicarte con tu Pico W. Ahora est\u00e1s listo para continuar con la siguiente gu\u00eda: Gu\u00eda 3: Cargar los archivos base del robot .","title":"\u00a1Listo!"},{"location":"robot/robot/","text":"Clase robot class MobileRobot(motor_config) Clase base para un robot m\u00f3vil con m\u00faltiples motores controlados por PID. Representa una plataforma gen\u00e9rica de robot m\u00f3vil que permite el control de m\u00faltiples motores, integraci\u00f3n de modelos cinem\u00e1ticos personalizados (jacobianos), actualizaci\u00f3n peri\u00f3dica mediante temporizador y ajuste de controladores PID por motor. Nota: Admite robots de tipo diferencial y mecanum u otras arquitecturas que compartan el mismo esquema de control individual por rueda. Parametros: motor_configs : dict Lista de diccionarios con los par\u00e1metros de configuraci\u00f3n de cada motor. Cada diccionario debe incluir al menos: Metodos: move(self, vx, vy, omega) stop() enable_auto_update(self, interval=10) _update_motors() set_custom_jacobian(func) _jacobian() default_jacobian() _compute_wheel_speeds(vx, vy, omega) update_odometry() set_control_mode() set_pid_constants(motor_index, kp) Ejemplos: from config import CONFIG from robot.base import MobileRobot robot = MobileRobot(config) robot.move(vx=0.2, vy=0.0, omega=0.1)","title":"Robot"},{"location":"robot/robot/#clase-robot","text":"class MobileRobot(motor_config) Clase base para un robot m\u00f3vil con m\u00faltiples motores controlados por PID. Representa una plataforma gen\u00e9rica de robot m\u00f3vil que permite el control de m\u00faltiples motores, integraci\u00f3n de modelos cinem\u00e1ticos personalizados (jacobianos), actualizaci\u00f3n peri\u00f3dica mediante temporizador y ajuste de controladores PID por motor. Nota: Admite robots de tipo diferencial y mecanum u otras arquitecturas que compartan el mismo esquema de control individual por rueda. Parametros: motor_configs : dict Lista de diccionarios con los par\u00e1metros de configuraci\u00f3n de cada motor. Cada diccionario debe incluir al menos: Metodos: move(self, vx, vy, omega) stop() enable_auto_update(self, interval=10) _update_motors() set_custom_jacobian(func) _jacobian() default_jacobian() _compute_wheel_speeds(vx, vy, omega) update_odometry() set_control_mode() set_pid_constants(motor_index, kp) Ejemplos: from config import CONFIG from robot.base import MobileRobot robot = MobileRobot(config) robot.move(vx=0.2, vy=0.0, omega=0.1)","title":"Clase robot"},{"location":"sensors/sensor/","text":"aqui sensores","title":"sensor"},{"location":"sensors/sensor/#aqui-sensores","text":"","title":"aqui sensores"},{"location":"sensors/ultrasonico/","text":"aqui va la doc de ultrasonico","title":"ultrasonido"},{"location":"sensors/ultrasonico/#aqui-va-la-doc-de-ultrasonico","text":"","title":"aqui va la doc de ultrasonico"},{"location":"test/test/","text":"aqu\u00ed test","title":"prueba1"},{"location":"test/test/#aqui-test","text":"","title":"aqu\u00ed test"},{"location":"utils/util/","text":"Aqui c\u00f3digo de utilidades","title":"utilidad"},{"location":"utils/util/#aqui-codigo-de-utilidades","text":"","title":"Aqui c\u00f3digo de utilidades"}]}